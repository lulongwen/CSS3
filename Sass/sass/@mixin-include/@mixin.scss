/*
  @mixin 声明混合
  @include 引用混合

  @mixin opacity()      不写参数，可以直接调用
  @mixin opacity($op)    调用时，必须传参
  @mixin opacity($op:90) 调用时，如果传参就用传了的参数，没传就用默认的
*/
@mixin opacity($op: 50){ // 必须要有默认参数，防止调用不传参报错
  opacity: $op / 100; // 必须除以 100，因为最大值是 1
  filter: alpha(opacity=$op);
}

.list{
  // 调用 @mixin，不传参可以省略括号
  @include opacity;
  @include opacity(30);
}


/* ... 多值混合，类似 JS中的扩展运算符 
   ... 表示参数不确定有多少个
*/
@mixin shadow($shadow...){
  box-shadow: $shadow;
}

.item{
  @include opacity;
  @include shadow(0 0 3px rgba(0,0,0,.3), inset 0 0 15px rgba(213, 0, 0, .8))
}


// 三角的方向是相反的
@mixin triggle($pos:top, $size:5px, $color:#f00){
  @if($pos == top){
    border:{ // 混合里面可以嵌套，继承里面不可以嵌套
      style: dashed dashed solid dashed;
      color: transparent transparent $color transparent;
    }
  }
  @else if($pos == right){
    border:{
      style: dashed dashed dashed solid;
      color: transparent transparent transparent $color;
    }
  }
  @else if($pos == bottom){
    border:{
      style: solid dashed dashed dashed;
      color: $color transparent transparent transparent;
    }
  }
  @else if($pos == left){
    border:{
      style: dashed solid dashed dashed;
      color: transparent $color transparent transparent;
    }
  }

  width: 0;
  height: 0;
  border-width: $size;
  overflow: hidden;
}

.box{
  @include triggle($pos:top, $color:#90f);
  @include opacity(80);
}

// 定义带参数的混合
@mixin alert($color, $bgcolor){
  color: $color;
  background-color: $bgcolor;
  a{
    color: darken($color, 10%);
  }
}

.warning{
  // 顺序要对应
  @include alert(#90f, #09f);
}

.default{
  // 顺序随便
  @include alert($bgcolor:#90f, $color: #f09);
}


.nav{
  h2, h3, h4{ // 群组选择器
    font-size: 20px;
  }
  .title{
    >p{
      font-size: 12px; // 多属性
      border: 1px solid #d88{
        left: 0;
        top: 10px;
      }
    }
  }
}



